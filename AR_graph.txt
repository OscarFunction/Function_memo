/*
 * これはmp_mainのmainから呼ばれる関数です。
 * 中には解析器やリストラクチャリングじゃ無い関数も存在しますが、
 * 分析しやすいため、全部まとめてみました。
*/

//C: Control(制御用)
//R: restucting module(リストラクチャリングモジュール)
//A: Analyzer(解析器)
//D: Debug(デバッグ用情報を出力する)
//

//After qrfe

add_option_line              X
adjvar2local                 X
set_module_main              X
const_list_to_hash           X
entry2sub                    X
save_pblock_in_module        X
adjust_lang_c_cmd_option     X

c_blocking                   R
---------------------------------------------
call_graph_wrapper           A              F
cfa                          A
pointer_analysis_wrapper     A              F
subid_module                 A
def_use_var_list             A              F
mp_set_loop_var              A              F
make_arg_def_use             A
rb2loop                      R
---------------------------------------------
check_interlink              D              N
call_graph_wrapper           A              Y/A
specify_char_length          X
set_new_io_qr                X
blocking                     R
save_pblock_in_module        X
---------------------------------------------
check_interlink              D              N
call_graph_wrapper           A              Y/A
remove_redundant_common      R
---------------------------------------------
commutative_processing       X
inline_expansion             R
---------------------------------------------
check_interlink              D              N
call_graph_wrapper           A              Y/A
subid_module                 A
keep_consistency_bpa         A
mp_exp_priv                  A
interpret_pc_and_pe_opt      A
def_lay_wrapper              A
call_graph_wrapper           A              Y/A
cfa                          A
pointer_analysis_wrapper     A              Y/A
def_use_var_list             A              Y/A
mp_set_loop_var              A              Y/A
make_arg_def_use             A
dataflow_anal                A
loop_index_renaming          R              Y/R
---------------------------------------------
make_in_out                  A
make_dda_data                A
dolp_dda_wrapper             A
commutative_processing       X
cost_wrapper                 A
block_cost                   A
check_directive_before_def_layer X
def_layer_wrapper            A
check_interlink              D              N

preprocess_for_macro_task_fusion R
---------------------------------------------
call_graph_wrapper           A              Y/A
subid_module                 A
cfa                          A
pointer_analysis_wrapper     A              Y/A
def_use_var_list             A              Y/A
mp_set_loop_var              A              Y/A
make_arg_def_use             A
dataflow_anal                A
make_in_out                  A
make_dda_data                A
macro_tast_fusion            R
---------------------------------------------
call_graph_wrapper           A              Y/A
subid_module                 A
cfa                          A
pointer_analysis_wrapper     A              Y/A
def_use_var_list             A              Y/A
mp_set_loop_var              A              Y/A
make_arg_def_use             A
dataflow_anal                A
make_in_out                  A
make_dda_data                A

ncc_wrapper                  A
mtgen                        X
check_interlink              D             N

//:8140 残りの部分の関数はまでコードの内容は確認しておりません
今週中に終わらせたいです


追記として、以上の内容の中で、
pointer_analysis_wrapper関数内部の構造では
//------------------------------
//pointer_analysis_wrapper
//->pointer_analysis
//->call_graph_wrapper
//->subid_module
//->def_use_var_list
//->mp_set_loop_var
//------------------------------
になっておりまして、内部で呼ばれている関数がpointer_analysis_wrapper外部でもすぐ呼ばれているケースも幾つかありましたので、
ここの部分は必要なのでしょうか？


以上の内容をまとめると(CとDを除いて...)、大体こういう感じになっています:
-----------------------------
Aを幾つかする
Rを幾つかする
-----------------------------
すなわち、リストラクチャリングする前に必ず解析をする。
しかし、重複する解析器は全部解析する必要が無く、前回のリストラクチャリングをしたモジュールのみ実行すれば良い。

これを実装するために、これらの内容が必要

(i)解析器毎にbool first_analysis変数が必要
//defaultの値はtrue、一回目の解析は必ず必要

(ii)gblにIntSet mpt_list変数が必要
//リストラクチャリングをした後、module->entryをこのIntSetに加える

(iii)bool in_IntSet(mpt_list, mpt->entry)
//本moduleがIntSetに有るかどうかの判断

(iv)bool in_IntSet(mpt_list, mpt_sub->entry)
//子関数がIntSetに有るかどうかの判断













